name: CI

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

env:
  JAVA_VERSION: "12.x"
  FLUTTER_VERSION: "2.2.3"
  FLUTTER_CHANNEL: "stable"
  PROPERTIES_PATH: "./android/key.properties"

jobs:
  flutter_test:
    name: Analyze and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
      - run: flutter pub get
      - run: flutter analyze
      - run: flutter format --dry-run --set-exit-if-changed lib/
      - run: flutter format --dry-run --set-exit-if-changed test/
      - run: flutter test --coverage
      - run: flutter test --machine > test-results.json
      - uses: dorny/test-reporter@v1.4.2
        with:
          name: test-results
          path: test-results.json
          reporter: flutter-json
      - uses: VeryGoodOpenSource/very_good_coverage@v1.1.1
        with:
          min_coverage: 10
      - uses: codecov/codecov-action@v2
        with:
          file: coverage/lcov.info

  build_ios:
    name: Build for iOS
    needs: [flutter_test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build ios --release --no-codesign

  build_appbundle:
    name: Build APPBUNDLE for Android
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build appbundle
      - name: Upload appbundle
        uses: actions/upload-artifact@v2.1.4
        with:
          name: appbundle_notAsigned
          path: build/app/outputs/bundle/release/app-release.aab

  build_apk:
    name: Build APK for Android
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build apk
      - name: Upload apk
        uses: actions/upload-artifact@v2.1.4
        with:
          name: apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_web:
    name: Build for WEB
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
      - run: flutter pub get
      - run: flutter test
      - run: flutter build web

  publish_playStore:
    name: Publish PlayStore
    needs: [build_appbundle]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}

      # Creating the key.properties file
      - run: |
          echo keyPassword=\${{ secrets.KEY_STORE }} > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ secrets.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=\${{ secrets.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}

      # Decoding base64 key into a file
      - run: echo "${{ secrets.KEYSTORE2 }}" | base64 --decode > android/app/key.jks

      # Get dependencies and make assigned appbundle
      - run: |
          flutter pub get
          flutter build appbundle

      # Make appbundle downloadable
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: appbundle_assigned
          path: build/app/outputs/bundle/release

      # # Creating googleServices.json
      # - name: Create service_account.json FROM secrets.SERVICE_ACCOUNT_JSON
      #   run: echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' > service_account.json

      # # Upload file to Play Store
      # - name: Upload play store
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     serviceAccountJson: service_account.json
      #     packageName: br.com.sistemasamazonas
      #     releaseFile: build/app/outputs/bundle/release/app-release.aab
      #     track: internal
      #     inAppUpdatePriority: 2
      #     userFraction: 0.33
      #     whatsNewDirectory: distribution/whatsnew
      #     mappingFile: build/app/outputs/mapping/release/mapping.txt
